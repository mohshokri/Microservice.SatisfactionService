// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Satisfaction.Infrastructure.Persistence;

namespace Satisfaction.Infrastructure.Migrations
{
    [DbContext(typeof(SatisfactionContext))]
    partial class SatisfactionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.SurveyAssignmentSequenceId", "'SurveyAssignmentSequenceId', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.SurveyConfigurationSequenceId", "'SurveyConfigurationSequenceId', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.SurveySequenceId", "'SurveySequenceId', '', '1', '10', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.ActAggregate.Act", b =>
                {
                    b.Property<int>("ActId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ActDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AlarmDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("AlarmDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("AlarmTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("AssignedChassisId")
                        .HasColumnType("int");

                    b.Property<int>("ContactType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Creator")
                        .HasColumnType("int");

                    b.Property<string>("CrmSupervisorDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("CustomerState")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuccessCall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSurvey")
                        .HasColumnType("bit");

                    b.HasKey("ActId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AssignedChassisId");

                    b.ToTable("Acts");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.MessageAggregate.Outbox", b =>
                {
                    b.Property<int>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SendType")
                        .HasColumnType("int");

                    b.HasKey("OutboxId");

                    b.ToTable("OutBoxes");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.PartyAggregate.Franchise", b =>
                {
                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BranchTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("FranchiseId");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.PartyAggregate.Party", b =>
                {
                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Creator")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Modifier")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PartyId");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SMSAggregate.MessageTemplate", b =>
                {
                    b.Property<int>("MessageTemplateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFix")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TemplateText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageTemplateId");

                    b.ToTable("MessageTemplates");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SMSAggregate.SendMessage", b =>
                {
                    b.Property<int>("SendMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActId")
                        .HasColumnType("int");

                    b.Property<string>("CustomizedTextMessage")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("MessageTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SendType")
                        .HasColumnType("int");

                    b.HasKey("SendMessageId");

                    b.ToTable("SendMessages");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.AnswerQuestionItem", b =>
                {
                    b.Property<int>("AnswerQuestionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<int>("QuestionItemId")
                        .HasColumnType("int");

                    b.HasKey("AnswerQuestionItemId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionItemId");

                    b.ToTable("AnswerQuestionItems");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "SurveySequenceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Creator")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Modifier")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("SurveyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SurveyTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SurveyType")
                        .HasColumnType("int");

                    b.HasKey("SurveyId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedChassisId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("AnswerId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyQuestion", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestionOrder")
                        .HasColumnType("int");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyQuestionItem", b =>
                {
                    b.Property<int>("QuestionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("QuestionItemValue")
                        .HasColumnType("int");

                    b.HasKey("QuestionItemId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionItems");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyScore", b =>
                {
                    b.Property<int>("SurveyScoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<int>("MinScore")
                        .HasColumnType("int");

                    b.Property<int>("SatisfactionRate")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("SurveyScoreId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyScores");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAssignmentAggregate.AssignedChassis", b =>
                {
                    b.Property<int>("AssignedChassisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("AssignedChassisId");

                    b.HasIndex("SurveyAssignmentId");

                    b.ToTable("AssignedChassis");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAssignmentAggregate.SurveyAssignment", b =>
                {
                    b.Property<int>("SurveyAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "SurveyAssignmentSequenceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<int>("SurveyConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("SurveyAssignmentId");

                    b.HasIndex("PartyId");

                    b.ToTable("SurveyAssignments");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyConfigurationAggregate.CochranFormula", b =>
                {
                    b.Property<int>("CochranFormulaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<int>("OneMonth")
                        .HasColumnType("int");

                    b.Property<int>("Trimester")
                        .HasColumnType("int");

                    b.HasKey("CochranFormulaId");

                    b.ToTable("CochranFormula");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyConfigurationAggregate.SurveyConfiguration", b =>
                {
                    b.Property<int>("SurveyConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:HiLoSequenceName", "SurveyConfigurationSequenceId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.SequenceHiLo);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Creator")
                        .HasColumnType("int");

                    b.Property<int>("ImpactRate")
                        .HasColumnType("int");

                    b.Property<int>("SamplingMethod")
                        .HasColumnType("int");

                    b.Property<int>("SurveyType")
                        .HasColumnType("int");

                    b.HasKey("SurveyConfigurationId");

                    b.ToTable("SurveyConfigurations");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.TimeSettingAggregate.TimeSetting", b =>
                {
                    b.Property<int>("TimeSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("TimeSettingId");

                    b.ToTable("TimeSettings");
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.ActAggregate.Act", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyAnswer", "SurveyAnswer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAssignmentAggregate.AssignedChassis", "AssignedChassis")
                        .WithMany("Acts")
                        .HasForeignKey("AssignedChassisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.PartyAggregate.Party", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.PartyAggregate.Franchise", "Franchise")
                        .WithMany("Parties")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SMSAggregate.MessageTemplate", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.SMSAggregate.SendMessage", "SendMessage")
                        .WithMany("MessageTemplates")
                        .HasForeignKey("MessageTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.AnswerQuestionItem", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyAnswer", null)
                        .WithMany("AnswerQuestionItems")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyQuestionItem", null)
                        .WithMany("AnswerQuestionItems")
                        .HasForeignKey("QuestionItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.Survey", b =>
                {
                    b.OwnsOne("Satisfaction.Domain.AggregatesModel.Shared.DateRange", "ActivationRange", b1 =>
                        {
                            b1.Property<int>("SurveyId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("EndDate")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("StartDate")
                                .HasColumnType("datetime2");

                            b1.HasKey("SurveyId");

                            b1.ToTable("Surveys");

                            b1.WithOwner()
                                .HasForeignKey("SurveyId");
                        });

                    b.OwnsOne("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyImage", "SurveyImage", b1 =>
                        {
                            b1.Property<int>("SurveyId")
                                .HasColumnType("int");

                            b1.Property<byte[]>("LogoAttachmentContent")
                                .HasColumnType("varbinary(max)");

                            b1.Property<string>("LogoFileExtention")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SurveyId");

                            b1.ToTable("Surveys");

                            b1.WithOwner()
                                .HasForeignKey("SurveyId");
                        });
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyQuestion", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAggregate.Survey", null)
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyQuestionItem", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyQuestion", null)
                        .WithMany("QuestionItems")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAggregate.SurveyScore", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAggregate.Survey", null)
                        .WithMany("SurveyScores")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAssignmentAggregate.AssignedChassis", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.SurveyAssignmentAggregate.SurveyAssignment", "SurveyAssignment")
                        .WithMany("AssignedChassis")
                        .HasForeignKey("SurveyAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Satisfaction.Domain.AggregatesModel.SurveyAssignmentAggregate.SurveyAssignment", b =>
                {
                    b.HasOne("Satisfaction.Domain.AggregatesModel.PartyAggregate.Party", "Party")
                        .WithMany("SurveyAssignments")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
